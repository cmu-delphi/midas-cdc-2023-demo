[
  {
    "objectID": "index.html#finding-fetching-and-processing-epidemiological-data-with-epidatr-and-epiprocess",
    "href": "index.html#finding-fetching-and-processing-epidemiological-data-with-epidatr-and-epiprocess",
    "title": "",
    "section": "Finding, fetching, and processing epidemiological data with {epidatr} and {epiprocess}",
    "text": "Finding, fetching, and processing epidemiological data with {epidatr} and {epiprocess}\n\nDelphi Research Group at CMU\nSlides: Nat DeFries, Dmitry Shemetov, Logan Brooks, others on Delphi tooling team\nCDC and MIDAS Forecasting Meeting — 21 November 2023\nSlides are online at https://cmu-delphi.github.io/midas-cdc-2023-demo"
  },
  {
    "objectID": "index.html#the-delphi-epidatr-package-is-a-new-r-front-end-for-the-delphi-epidata-api",
    "href": "index.html#the-delphi-epidatr-package-is-a-new-r-front-end-for-the-delphi-epidata-api",
    "title": "",
    "section": "The Delphi {epidatr} package is a new R front-end for the Delphi Epidata API",
    "text": "The Delphi {epidatr} package is a new R front-end for the Delphi Epidata API\n\nstreamlines downloading and usage of data from the Delphi Epidata API\n\nreal-time access to epidemiological surveillance data for influenza, COVID-19, and other diseases\ndata from both official government sources such as the CDC and from private partners\na historical record of all data available, including corrections and updates, which is useful for backtesting of forecasting models.\n\nprovides a simple R interface to the API, with functions for downloading data, parsing results, and converting to tidy format.\n\nthe {epidatr} package is a complete rewrite of the {covidcast} package and delphi_epidata.R script, with a focus on speed, reliability, and ease of use\nthe {covidcast} package and delphi_epidata.R script are deprecated and will no longer be updated"
  },
  {
    "objectID": "index.html#conveniently-install-in-the-normal-ways",
    "href": "index.html#conveniently-install-in-the-normal-ways",
    "title": "",
    "section": "Conveniently install in the normal ways",
    "text": "Conveniently install in the normal ways\n\nYou can install the stable version of this package from CRAN:\n\n\ninstall.packages(\"epidatr\")\npak::pkg_install(\"epidatr\")\nrenv::install(\"epidatr\")\n\n\nOr if you want the development version, install from GitHub:\n\n\npak::pkg_install(\"cmu-delphi/epidatr@dev\")\nremotes::install_github(\"cmu-delphi/epidatr\", ref = \"dev\")\nrenv::install(\"cmu-delphi/epidatr@dev\")\n\n\n{epidatr} requires a (free) API key for full functionality\n\nTo generate your key, register for a pseudo-anonymous account (see the general API website for details) and use save_api_key() for help storing the key.\n(Note: we also have private endpoints (those prefixed with pvt_) that require a separate key to be passed as an argument. These endpoints require data use agreements to access.)\n\n\n:::"
  },
  {
    "objectID": "index.html#example-hhsnhsn-hospitalization-data",
    "href": "index.html#example-hhsnhsn-hospitalization-data",
    "title": "",
    "section": "Example: HHS/NHSN hospitalization data",
    "text": "Example: HHS/NHSN hospitalization data\n\nFetch national COVID-19 hospital admissions:\n\n\nepidata &lt;- pub_covidcast(\n  source = \"hhs\",\n  signals = \"confirmed_admissions_covid_1d\",\n  geo_type = \"nation\",\n  time_type = \"day\",\n  geo_values = \"*\",\n  time_values = \"*\"\n  # (by default, fetches the current version)\n)\n# `epidata` looks like:\n\n\n\n# A tibble: 1,411 × 15\n  geo_value signal   source geo_type time_type time_value issue        lag value\n  &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;  &lt;fct&gt;    &lt;fct&gt;     &lt;date&gt;     &lt;date&gt;     &lt;int&gt; &lt;dbl&gt;\n1 us        confirm… hhs    nation   day       2019-12-31 2023-04-13  1199     0\n2 us        confirm… hhs    nation   day       2020-01-01 2023-04-13  1198   132\n3 us        confirm… hhs    nation   day       2020-01-02 2023-04-13  1197   132\n4 us        confirm… hhs    nation   day       2020-01-03 2023-04-13  1196   132\n5 us        confirm… hhs    nation   day       2020-01-04 2023-04-13  1195   132\n# ℹ 1,406 more rows\n# ℹ 6 more variables: direction &lt;dbl&gt;, missing_value &lt;int&gt;,\n#   missing_stderr &lt;int&gt;, missing_sample_size &lt;int&gt;, stderr &lt;dbl&gt;,\n#   sample_size &lt;dbl&gt;"
  },
  {
    "objectID": "index.html#example-versioned-hhsnhsn-hospitalization-data",
    "href": "index.html#example-versioned-hhsnhsn-hospitalization-data",
    "title": "",
    "section": "Example: versioned HHS/NHSN hospitalization data",
    "text": "Example: versioned HHS/NHSN hospitalization data\n\nFetch what the query should have looked like back in June (“as of” June 1st):\n\n\nepidata &lt;- pub_covidcast(\n  source = \"hhs\",\n  signals = \"confirmed_admissions_covid_1d\",\n  geo_type = \"nation\",\n  time_type = \"day\",\n  geo_values = \"*\",\n  time_values = \"*\",\n  as_of = \"2023-06-01\"\n)\n# `epidata` looks like:\n\n\n\n# A tibble: 1,247 × 15\n  geo_value signal   source geo_type time_type time_value issue        lag value\n  &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;  &lt;fct&gt;    &lt;fct&gt;     &lt;date&gt;     &lt;date&gt;     &lt;int&gt; &lt;dbl&gt;\n1 us        confirm… hhs    nation   day       2019-12-31 2023-04-13  1199     0\n2 us        confirm… hhs    nation   day       2020-01-01 2023-04-13  1198   132\n3 us        confirm… hhs    nation   day       2020-01-02 2023-04-13  1197   132\n4 us        confirm… hhs    nation   day       2020-01-03 2023-04-13  1196   132\n5 us        confirm… hhs    nation   day       2020-01-04 2023-04-13  1195   132\n# ℹ 1,242 more rows\n# ℹ 6 more variables: direction &lt;dbl&gt;, missing_value &lt;int&gt;,\n#   missing_stderr &lt;int&gt;, missing_sample_size &lt;int&gt;, stderr &lt;dbl&gt;,\n#   sample_size &lt;dbl&gt;"
  },
  {
    "objectID": "index.html#access-other-useful-data-including-delphi-exclusive-sources",
    "href": "index.html#access-other-useful-data-including-delphi-exclusive-sources",
    "title": "",
    "section": "Access other useful data, including Delphi-exclusive sources",
    "text": "Access other useful data, including Delphi-exclusive sources\n\nchng from Change Healthcare\n\nOutpatient COVID and influenza signals from insurance claims\n\ndoctor-visits from health system partners\n\nCOVID signals from insurance claims\n\nfb-survey from (parts of) the COVID-19 Trends and Impact Survey in collaboration with Facebook\n\nSignals of public behaviors and beliefs about public health during the pandemic\n\n\nSee also covidcast_epidata() or the COVIDcast web site for a listing of other COVIDcast data available."
  },
  {
    "objectID": "index.html#access-more-than-just-covid-data",
    "href": "index.html#access-more-than-just-covid-data",
    "title": "",
    "section": "Access more than just COVID data!",
    "text": "Access more than just COVID data!\nUsing avail_endpoints() you can find a listing of our other endpoints that serve a wide variety of public health data. Here we’ve filtered to non-COVID-specific data.\n\n\n   Endpoint               Description                                \n 1 pub_delphi()           Delphi's ILINet forecasts                  \n 2 pub_dengue_nowcast()   Delphi's PAHO Dengue nowcast               \n 3 pub_ecdc_ili()         ECDC ILI data                              \n 4 pub_flusurv()          FluSurv hospitalization data               \n 5 pub_fluview()          FluView ILINet data                        \n 6 pub_fluview_clinical() FluView virological data from clinical labs\n 7 pub_fluview_meta()     FluView metadata                           \n 8 pub_gft()              Google Flu Trends data                     \n 9 pub_kcdc_ili()         KCDC ILI data                              \n10 pub_meta()             API metadata                               \n11 pub_nidss_dengue()     NIDSS dengue data                          \n12 pub_nidss_flu()        NIDSS flu data                             \n13 pub_nowcast()          Delphi's ILI nowcast                       \n14 pub_paho_dengue()      PAHO Dengue data                           \n15 pub_wiki()             Wikipedia access data"
  },
  {
    "objectID": "index.html#consider-subscribing-to-the-delphi-api-mailing-list-to-be-notified-of-package-updates-new-data-sources-corrections-and-other-updates",
    "href": "index.html#consider-subscribing-to-the-delphi-api-mailing-list-to-be-notified-of-package-updates-new-data-sources-corrections-and-other-updates",
    "title": "",
    "section": "Consider subscribing to the Delphi API mailing list to be notified of package updates, new data sources, corrections, and other updates",
    "text": "Consider subscribing to the Delphi API mailing list to be notified of package updates, new data sources, corrections, and other updates"
  },
  {
    "objectID": "index.html#the-epiprocess-package-helps-work-with-epidemic-datasets",
    "href": "index.html#the-epiprocess-package-helps-work-with-epidemic-datasets",
    "title": "",
    "section": "The {epiprocess} package helps work with epidemic datasets",
    "text": "The {epiprocess} package helps work with epidemic datasets\n\npak::pkg_install(\"cmu-delphi/epiprocess@main\")\n\n\nprovides common data structures for epidemiological data sets measured over space and time\nprovides utilities for basic signal processing tasks"
  },
  {
    "objectID": "index.html#epi_df-a-snapshot-of-epidata-in-time",
    "href": "index.html#epi_df-a-snapshot-of-epidata-in-time",
    "title": "",
    "section": "epi_df: a snapshot of epidata in time",
    "text": "epi_df: a snapshot of epidata in time\n\nrepresents the most up-to-date values of dataset as of a given time\na subclassed tibble with two required columns: geo_value and time_value\nand associated metadata: geo_type, time_type, other_keys, as_of\ncan have any number of other columns, which we call signal (or measured) variables"
  },
  {
    "objectID": "index.html#epi_df-a-snapshot-of-epidata-in-time-1",
    "href": "index.html#epi_df-a-snapshot-of-epidata-in-time-1",
    "title": "",
    "section": "epi_df: a snapshot of epidata in time",
    "text": "epi_df: a snapshot of epidata in time\nProduce an epi_df from epidatr output like so:\n\ntbl &lt;- pub_covidcast(\n  source = \"hhs\",\n  signals = \"confirmed_admissions_covid_1d\",\n  geo_type = \"state\",\n  time_type = \"day\",\n  geo_values = \"ca,fl,ny,tx\",\n  time_values = \"*\"\n)\nepi_df &lt;- tbl %&gt;%\n  # Add NAs to fill gaps, cover same time range for each geo:\n  tidyr::complete(geo_value, time_value = tidyr::full_seq(time_value, period = 1L)) %&gt;%\n  as_epi_df(\n    geo_type = \"state\",\n    time_type = \"day\",\n    as_of = max(tbl$issue)\n  )"
  },
  {
    "objectID": "index.html#epi_df-a-snapshot-of-epidata-in-time-2",
    "href": "index.html#epi_df-a-snapshot-of-epidata-in-time-2",
    "title": "",
    "section": "epi_df: a snapshot of epidata in time",
    "text": "epi_df: a snapshot of epidata in time\n\nepi_df\n\nAn `epi_df` object, 5,644 x 15 with metadata:\n* geo_type  = state\n* time_type = day\n* as_of     = 2023-11-19\n\n# A tibble: 5,644 × 15\n   geo_value time_value signal source geo_type time_type direction issue \n * &lt;chr&gt;     &lt;date&gt;     &lt;chr&gt;  &lt;chr&gt;  &lt;fct&gt;    &lt;fct&gt;         &lt;dbl&gt; &lt;date&gt;\n 1 ca        2019-12-31 &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;             NA NA    \n 2 ca        2020-01-01 &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;             NA NA    \n 3 ca        2020-01-02 &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;             NA NA    \n 4 ca        2020-01-03 &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;             NA NA    \n 5 ca        2020-01-04 &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;             NA NA    \n 6 ca        2020-01-05 &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;             NA NA    \n 7 ca        2020-01-06 &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;             NA NA    \n 8 ca        2020-01-07 &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;             NA NA    \n 9 ca        2020-01-08 &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;             NA NA    \n10 ca        2020-01-09 &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;             NA NA    \n# ℹ 5,634 more rows\n# ℹ 7 more variables: lag &lt;int&gt;, missing_value &lt;int&gt;, missing_stderr &lt;int&gt;,\n#   missing_sample_size &lt;int&gt;, value &lt;dbl&gt;, stderr &lt;dbl&gt;, sample_size &lt;dbl&gt;"
  },
  {
    "objectID": "index.html#epi_archive-a-collection-of-historical-epidata",
    "href": "index.html#epi_archive-a-collection-of-historical-epidata",
    "title": "",
    "section": "epi_archive: a collection of historical epidata",
    "text": "epi_archive: a collection of historical epidata\n\nrepresents the most up-to-date values of dataset as of various given times\nrequired input columns: geo_value, time_value, version\ncan have any number of other key or signal/measured columns"
  },
  {
    "objectID": "index.html#epi_archive-a-collection-of-historical-epidata-1",
    "href": "index.html#epi_archive-a-collection-of-historical-epidata-1",
    "title": "",
    "section": "epi_archive: a collection of historical epidata",
    "text": "epi_archive: a collection of historical epidata\n\ntbl &lt;- pub_covidcast(\n  source = \"hhs\",\n  signals = \"confirmed_admissions_covid_1d\",\n  geo_type = \"state\",\n  time_type = \"day\",\n  geo_values = \"ca,fl,ny,tx\",\n  time_values = \"*\", # \"*\" = all time values\n  issues = epirange(\"1234-01-01\", \"2023-06-01\") # start of range must be before data set start\n)\nepi_archive &lt;- tbl %&gt;%\n  select(\n    geo_value, time_value,\n    version = issue, admissions = value\n  ) %&gt;%\n  # don't try to `complete` here; `complete` after `epix_as_of` or inside `epix_slide` computations\n  as_epi_archive(compactify = TRUE)"
  },
  {
    "objectID": "index.html#epi_archive-a-collection-of-historical-epidata-2",
    "href": "index.html#epi_archive-a-collection-of-historical-epidata-2",
    "title": "",
    "section": "epi_archive: a collection of historical epidata",
    "text": "epi_archive: a collection of historical epidata\n\nepi_archive\n\nAn `epi_archive` object, with metadata:\n* geo_type  = state\n* time_type = day\n----------\n* min time value = 2019-12-31\n* max time value = 2023-05-30\n* first version with update = 2020-11-16\n* last version with update = 2023-06-01\n* No clobberable versions\n* versions end   = 2023-06-01\n----------\nData archive (stored in DT field): 24625 x 4\nColumns in DT: geo_value, time_value, version, admissions\n----------\nPublic R6 methods: initialize, print, as_of, fill_through_version, \n                   truncate_versions_after, merge, group_by, slide, clone"
  },
  {
    "objectID": "index.html#epi_archive-a-collection-of-historical-epidata-3",
    "href": "index.html#epi_archive-a-collection-of-historical-epidata-3",
    "title": "",
    "section": "epi_archive: a collection of historical epidata",
    "text": "epi_archive: a collection of historical epidata\n\nepi_archive$DT\n\n       geo_value time_value    version admissions\n    1:        ca 2020-02-03 2020-11-16         NA\n    2:        ca 2020-02-04 2020-11-16         NA\n    3:        ca 2020-02-05 2020-11-16         NA\n    4:        ca 2020-02-06 2020-11-16         NA\n    5:        ca 2020-02-07 2020-11-16         NA\n   ---                                           \n24621:        tx 2023-05-28 2023-05-31         98\n24622:        tx 2023-05-28 2023-06-01         85\n24623:        tx 2023-05-29 2023-05-31         19\n24624:        tx 2023-05-29 2023-06-01         96\n24625:        tx 2023-05-30 2023-06-01         96"
  },
  {
    "objectID": "index.html#some-epi_slide-use-cases",
    "href": "index.html#some-epi_slide-use-cases",
    "title": "",
    "section": "Some epi_slide use cases",
    "text": "Some epi_slide use cases\n\nCalculate rolling or running averages, sums, other statistics\nCalculate custom growth rates, categorical trend definitions, smoothing (see also epiprocess::growth_rate, epipredict::step_lag_difference)\n(Perform latency&revision-naive forecaster backtesting)"
  },
  {
    "objectID": "index.html#some-epix_as_of-epix_slide-use-cases",
    "href": "index.html#some-epix_as_of-epix_slide-use-cases",
    "title": "",
    "section": "Some epix_as_of, epix_slide use cases",
    "text": "Some epix_as_of, epix_slide use cases\n\nBetter backtesting: generate pseudoprospective forecasts\nPlot past forecast against data available at generation time\nPlot evolution of how a time series was reported\nAnalyze reporting latency, revision behavior, trends\nImprove forecasts when revisions are significant: prepare “version-analogous” training set predictor data"
  },
  {
    "objectID": "index.html#epi_df-and-epi_archive-utilities",
    "href": "index.html#epi_df-and-epi_archive-utilities",
    "title": "",
    "section": "epi_df and epi_archive utilities",
    "text": "epi_df and epi_archive utilities\n\nepi_df\n\ngroup_by() - standard grouped operations\nepi_slide() - perform (grouped) time-window computations on an epi_df\nepi_cor() - compute correlations between variables in an epi_df\n\nepi_archive\n\nepix_merge() - merge/join two epi_archive objects\nepix_as_of() - generate a snapshot epi_df from an epi_archive object\ngroup_by() - standard grouped operations\nepix_slide() - perform (grouped) time-windowed computations on several versions\n\nAnd more, including outlier detection1, growth rate calculation.\n\nfunctionality contributed by Evan Ray"
  },
  {
    "objectID": "index.html#resources",
    "href": "index.html#resources",
    "title": "",
    "section": "Resources",
    "text": "Resources\n\nepidatr (stable) documentation\nepidatr (dev) documentation\nCOVIDcast data source listing\nOther Delphi Epidata API endpoints\nepiprocess documentation\nDelphi Epidemiological Forecasting Book\n\n\n\n\nPackages for forecasting — cmu-delphi.github.io/midas-cdc-2023-demo"
  }
]